#!/usr/bin/python
#!encoding=utf-8
import os
import re
import sys

COLOR_RED       = 31
COLOR_GREEN     = 32
COLOR_YELLOW    = 33
COLOR_BLUE      = 34
COLOR_PURPLE    = 35
COLOR_CYAN      = 36

if len(sys.argv) < 2:
    print 'Usage: <cmd> [options]'
    sys.exit(0)
cmd = sys.argv[1]
options = sys.argv[2:]

def make_color(text, color):
    return '\x1b[%dm%s\x1b[0m' % (color, text)

def make_bgcolor(text, color):
    return '\x1b[30;%dm%s\x1b[0m' % (color + 10, text)

def cvs_status(args):
    RE_FILE = re.compile('^File:\\s*(.*?)\\s+Status:\\s*(.*?)\\s*$')
    RE_PATH = re.compile('^cvs server: Examining (.*)$')

    cmd_line = 'cvs status ' + ' '.join(args) + ' 2>&1'
    print make_bgcolor(cmd_line, COLOR_YELLOW)
    f = os.popen(cmd_line)
    filedir = ''
    while True:
        line = f.readline()
        if not line:
            break
        line = line.strip('\r\n')
        matchobj = RE_FILE.match(line)
        if matchobj:
            filename = matchobj.group(1)
            if filename.startswith('no file '):
                filename = filename[8:]
            filestatus = matchobj.group(2)
            status_table = {
                'Locally Modified':                 make_color('M ', COLOR_CYAN),
                'Locally Removed':                  make_color('R ', COLOR_RED),
                'Needs Checkout':                   make_bgcolor('! ', COLOR_RED),
                'Locally Added':                    make_color('A ', COLOR_GREEN),
                'Unknown':                          '? ',
                'File had conflicts on merge':      make_color('C ', COLOR_RED),
                'Needs Merge':                      make_color('M*', COLOR_CYAN),
            }
            filestatus = status_table.get(filestatus, None)
            if filestatus:
                print '%s %s%s' % (filestatus , filedir, filename)
        matchobj = RE_PATH.match(line)
        if matchobj:
            filedir =  matchobj.group(1).strip()
            if filedir == '.':
                filedir = ''
            if filedir != '':
                filedir += '/'
        if line.startswith('? '):
            if not line[-4:] in ['.pyc', '.log']:
                print line

def cvs_diff(args):
    for arg in args:
        filepath = arg
        filename = os.path.basename(filepath)
        tmpdir = os.getenv('TMP') or '/tmp'
        tmpfile = os.path.join(tmpdir, filename)
        os.system('cvs update -p %s > %s; ' % (filepath, tmpfile))
        os.system('vimdiff %s %s' % (tmpfile, filepath))

if cmd == 'status':
    cvs_status(options)
elif cmd == 'diff':
    cvs_diff(options)
